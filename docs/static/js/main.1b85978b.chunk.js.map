{"version":3,"sources":["ros/config.js","dashboard/Connection.jsx","dashboard/VelocitiesPanel.jsx","dashboard/TextInput.jsx","dashboard/TopicForm.jsx","contexts/GamepadContext.js","dashboard/Teleoperation.jsx","ros/rosService.js","dashboard/RobotState.jsx","dashboard/Dashboard.jsx","App.js","reportWebVitals.js","index.js"],"names":["Config","ROS2_WEB_BRIDGE_SERVER_IP","ROS2_WEB_BRIDGE_SERVER_PORT","RECONNECTION_TIMEOUT","CMD_VEL_TOPIC","POSE_TOPIC","ODOM_TOPIC","ConnectionContainer","styled","div","connected","ConnectionText","Connection","Velocities","VelocityHeading","h3","VelocityPanels","VelocityPanel","VelocityType","Indicator","span","VelocityButtons","VelocityButton","VelocitiesPanel","moveVel","setMoveVel","turnVel","setTurnVel","toFixed","onClick","sessionStorage","setItem","Input","input","bigFont","TextInput","props","useField","field","type","TopicFormContainer","TopicLabel","TopicFormElement","Form","TopicFieldContainer","TopicForm","setTopic","useState","localStorage","getItem","defaultTopic","setDefaultTopic","initialValues","topic","validationSchema","Yup","onSubmit","values","a","setSubmitting","resetForm","error","console","log","message","isSubmitting","handleSubmit","isValid","autoComplete","onKeyPress","e","key","shiftKey","preventDefault","name","placeholder","GamepadContext","createContext","TeleoperationContainer","ControlPanel","JoystickContainer","Button","AnimateGamepad","keyframes","Gamepad","gamepadActivated","gamepadConnected","TeleoperationText","Teleoperation","ros","Number","pollInterval","pollIntervalId","setPollIntervalId","useContext","setGamepadConnected","setGamepadActivated","cmd_vel","window","ROSLIB","Topic","messageType","useCmdVelTopic","keysPressed","up","down","left","right","move_cmd","turn_cmd","move","lx","az","twist","Message","linear","x","y","z","angular","publish","onkeydown","event","code","altKey","onkeyup","pollGamepad","axis0","axis1","buttonUp","buttonDown","buttonLeft","buttonRight","move_now","turn_now","gamepads","navigator","getGamepads","webkitGetGamepads","axes","buttons","pressed","addEventListener","clearInterval","currentTopic","size","baseColor","stickColor","stop","style","gridArea","onMouseDown","onMouseUp","setInterval","RobotStateContainer","GridContainer","Caption","Property","Value","RobotState","orientation","robotPose","setRobotPose","linearVelocity","angularVelocity","robotVelocities","setRobotVelocities","useEffect","poseSubscriber","velocitySubscriber","getOrientationFromQuaternion","rosOrientationQuaternion","q","Three","w","setFromQuaternion","Math","PI","subscribe","pose","position","unsubscribe","Heading","h1","ContentContainer","Dashboard","setConnected","Ros","initConnection","useCallback","establishConnection","connect","on","setTimeout","useRosConnection","Provider","value","pos","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b85978b.chunk.js","sourcesContent":["const Config = {\n  ROS2_WEB_BRIDGE_SERVER_IP: '192.168.0.180',\n  ROS2_WEB_BRIDGE_SERVER_PORT: 9090,\n  RECONNECTION_TIMEOUT: 3000,\n  CMD_VEL_TOPIC: '/cmd_vel',\n  POSE_TOPIC: '/amcl_pose',\n  ODOM_TOPIC: '/odom',\n};\n\nexport default Config;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst ConnectionContainer = styled.div`\n  display: flex;\n  transition: background 0.4s ease-out;\n  background: ${({ connected }) =>\n    connected ? 'var(--secondary-color-green)' : 'var(--secondary-color-red)'};\n  padding: 12px 0;\n  margin: 8px 0;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst ConnectionText = styled.div`\n  color: var(--primary-color-darker);\n  font-size: 1.2rem;\n  font-weight: 500;\n`;\n\nconst Connection = ({ connected }) => {\n  return (\n    <ConnectionContainer connected={connected}>\n      <ConnectionText>\n        {connected ? 'Robot Connected' : 'Robot Disconnected'}\n      </ConnectionText>\n    </ConnectionContainer>\n  );\n};\n\nexport default Connection;\n","import React from 'react';\nimport styled from 'styled-components';\nimport {\n  MdOutlineKeyboardArrowUp,\n  MdOutlineKeyboardArrowDown,\n} from 'react-icons/md';\n\nconst Velocities = styled.div`\n  width: 100%;\n  margin-bottom: 8px;\n`;\n\nconst VelocityHeading = styled.h3`\n  text-align: center;\n  margin-bottom: 4px;\n`;\n\nconst VelocityPanels = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  margin-bottom: 12px;\n`;\n\nconst VelocityPanel = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 12px;\n`;\n\nconst VelocityType = styled.div`\n  margin-right: 8px;\n`;\n\nconst Indicator = styled.span`\n  font-size: 1.2rem;\n  padding: 4px;\n  width: 48px;\n  text-align: center;\n  margin-right: 4px;\n  border: 1px solid var(--primary-color-light);\n  border-radius: 4px;\n`;\n\nconst VelocityButtons = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  align-content: center;\n`;\n\nconst VelocityButton = styled.span`\n  display: grid;\n  place-items: center;\n  font-size: 1.2rem;\n  margin: 1px;\n  cursor: pointer;\n  border: 1px solid var(--primary-color-light);\n  opacity: 0.6;\n  transition: opacity 0.1s ease-out;\n\n  @media (hover: hover) and (pointer: fine) {\n    &:hover {\n      opacity: 1;\n    }\n  }\n`;\n\nconst VelocitiesPanel = ({ moveVel, setMoveVel, turnVel, setTurnVel }) => {\n  return (\n    <Velocities>\n      <VelocityHeading>Velocities</VelocityHeading>\n      <VelocityPanels>\n        <VelocityPanel>\n          <VelocityType>Linear:</VelocityType>\n          <Indicator>{moveVel.toFixed(1)}</Indicator>\n          <VelocityButtons>\n            <VelocityButton\n              onClick={() => {\n                sessionStorage.setItem('moveVel', (moveVel + 0.2).toFixed(1));\n                setMoveVel(moveVel + 0.2);\n              }}\n            >\n              <MdOutlineKeyboardArrowUp />\n            </VelocityButton>\n            <VelocityButton\n              onClick={() => {\n                sessionStorage.setItem('moveVel', (moveVel - 0.2).toFixed(1));\n                setMoveVel(moveVel - 0.2);\n              }}\n            >\n              <MdOutlineKeyboardArrowDown />\n            </VelocityButton>\n          </VelocityButtons>\n        </VelocityPanel>\n        <VelocityPanel>\n          <VelocityType>Angular:</VelocityType>\n          <Indicator>{turnVel.toFixed(1)}</Indicator>\n          <VelocityButtons>\n            <VelocityButton\n              onClick={() => {\n                sessionStorage.setItem('turnVel', (turnVel + 0.2).toFixed(1));\n                setTurnVel(turnVel + 0.2);\n              }}\n            >\n              <MdOutlineKeyboardArrowUp />\n            </VelocityButton>\n            <VelocityButton\n              onClick={() => {\n                sessionStorage.setItem('turnVel', (turnVel - 0.2).toFixed(1));\n                setTurnVel(turnVel - 0.2);\n              }}\n            >\n              <MdOutlineKeyboardArrowDown />\n            </VelocityButton>\n          </VelocityButtons>\n        </VelocityPanel>\n      </VelocityPanels>\n    </Velocities>\n  );\n};\n\nexport default VelocitiesPanel;\n","import React from 'react';\nimport { useField } from 'formik';\nimport styled from 'styled-components';\n\nconst Input = styled.input`\n  width: 100%;\n  outline: none;\n  padding: 4px 6px;\n  border: 1px solid var(--primary-color-light);\n  background: var(--primary-color-dark);\n  color: var(--primary-color-light);\n  letter-spacing: 0.2px;\n  font-size: ${({ bigFont }) => (bigFont ? '1rem' : '0.8rem')};\n  transition: border 0.2s;\n\n  &::placeholder {\n    color: var(--secondary-color);\n    transition: color 0.2s;\n    letter-spacing: 0.1px;\n    font-size: 0.8rem;\n  }\n\n  &:focus {\n    border: 1px solid var(--primary-color-lighter);\n  }\n\n  &:focus::placeholder {\n    color: transparent;\n  }\n\n  &:invalid {\n    border: 1px solid lightcoral;\n  }\n`;\n\nexport const TextInput = ({ ...props }) => {\n  const [field] = useField(props);\n\n  return <Input {...field} {...props} type=\"text\" />;\n};\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\n\nimport { TextInput } from './TextInput';\n\nconst TopicFormContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 8px 0;\n`;\n\nconst TopicLabel = styled.div`\n  font-size: 1rem;\n  margin-right: 24px;\n  color: var(--primary-color-light);\n  padding-top: 2px;\n  margin-bottom: 4px;\n  letter-spacing: 0.2px;\n`;\n\nconst TopicFormElement = styled(Form)`\n  display: flex;\n  align-items: flex-start;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst TopicFieldContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n`;\n\nconst TopicForm = ({ setTopic }) => {\n  const [defaultTopic, setDefaultTopic] = useState(\n    localStorage.getItem('topic') || ''\n  );\n\n  return (\n    <div>\n      <Formik\n        initialValues={{ topic: defaultTopic }}\n        validationSchema={Yup.object({\n          topic: Yup.string(),\n        })}\n        onSubmit={async (values, { setSubmitting, resetForm }) => {\n          try {\n            setTopic(values.topic);\n            localStorage.setItem('topic', values.topic);\n            setDefaultTopic(values.topic);\n            resetForm({\n              values: {\n                topic: values.topic,\n              },\n            });\n          } catch (error) {\n            console.log(error.message);\n          } finally {\n            setSubmitting(false);\n          }\n        }}\n      >\n        {({ isSubmitting, handleSubmit, isValid }) => (\n          <TopicFormContainer>\n            <TopicLabel>Topic:</TopicLabel>\n            <TopicFormElement\n              autoComplete=\"none\"\n              onKeyPress={(e) => {\n                if (e.key === 'Enter' && e.shiftKey) {\n                  return;\n                }\n                if (e.key === 'Enter' && !e.shiftKey) {\n                  e.preventDefault();\n                  isValid && handleSubmit();\n                }\n              }}\n            >\n              <TopicFieldContainer>\n                <TextInput\n                  autoComplete=\"off\"\n                  bigFont\n                  name=\"topic\"\n                  type=\"text\"\n                  placeholder=\"Topic\"\n                />\n              </TopicFieldContainer>\n            </TopicFormElement>\n          </TopicFormContainer>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default TopicForm;\n","import { createContext } from 'react';\n\nexport const GamepadContext = createContext({});\n","import React, { useContext, useState } from 'react';\nimport { Joystick } from 'react-joystick-component';\nimport styled, { keyframes } from 'styled-components';\nimport {\n  CgArrowUpR,\n  CgArrowTopRightR,\n  CgArrowRightR,\n  CgArrowBottomRightR,\n  CgArrowDownR,\n  CgArrowBottomLeftR,\n  CgArrowLeftR,\n  CgArrowTopLeftR,\n} from 'react-icons/cg';\nimport { GiConsoleController } from 'react-icons/gi';\n\nimport { useCmdVelTopic } from '../ros/rosService';\nimport VelocitiesPanel from './VelocitiesPanel';\nimport TopicForm from './TopicForm';\nimport { GamepadContext } from '../contexts/GamepadContext';\n\nconst TeleoperationContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  padding: 12px 0;\n`;\n\nconst ControlPanel = styled.div`\n  width: max-content;\n  align-self: center;\n  display: grid;\n  grid-gap: 8px;\n  grid-template-columns: auto auto auto;\n  grid-template-rows: auto;\n\n  grid-template-areas:\n    'top-left up top-right'\n    'left joystick right'\n    'bottom-left down bottom-right';\n`;\n\nconst JoystickContainer = styled.div`\n  grid-area: 'joystick';\n  display: grid;\n  place-items: center;\n  z-index: 1;\n  opacity: 0.6;\n  transition: opacity 0.2s ease-out;\n  touch-action: none;\n\n  @media (hover: hover) and (pointer: fine) {\n    &:hover {\n      opacity: 1;\n    }\n  }\n`;\n\nconst Button = styled.div`\n  display: grid;\n  place-items: center;\n  font-size: 6.6rem;\n  opacity: 0.6;\n  cursor: pointer;\n  transition: opacity 0.2s ease-out;\n\n  @media (hover: hover) and (pointer: fine) {\n    &:hover {\n      opacity: 1;\n    }\n  }\n`;\n\nconst AnimateGamepad = keyframes`\n  from {\n    color: var(--secondary-color-green);\n  }\n  to {\n    color: var(--secondary-color-blue);\n  }\n`;\n\nconst Gamepad = styled.div`\n  margin-top: 6px;\n  font-size: 4rem;\n  text-align: center;\n  cursor: pointer;\n  color: ${({ gamepadActivated }) =>\n    gamepadActivated\n      ? 'var(--secondary-color-green)'\n      : 'var(--secondary-color-red)'};\n  animation: ${({ gamepadConnected, gamepadActivated }) =>\n      gamepadConnected && !gamepadActivated ? AnimateGamepad : 'none'}\n    0.6s ease-in-out infinite alternate;\n  transition: color 0.2s ease-out;\n`;\n\nconst TeleoperationText = styled.div`\n  width: 100%;\n  text-align: center;\n  font-size: 0.8rem;\n  margin-top: 12px;\n`;\n\nconst Teleoperation = ({ ros, connected }) => {\n  const [moveVel, setMoveVel] = useState(\n    Number(sessionStorage.getItem('moveVel')) || 1.0\n  );\n  const [turnVel, setTurnVel] = useState(\n    Number(sessionStorage.getItem('turnVel')) || 1.0\n  );\n\n  let pollInterval = null;\n  const [pollIntervalId, setPollIntervalId] = useState(null);\n\n  const [topic, setTopic] = useState(localStorage.getItem('topic') || '');\n\n  const {\n    gamepadConnected,\n    setGamepadConnected,\n    gamepadActivated,\n    setGamepadActivated,\n  } = useContext(GamepadContext);\n\n  const cmd_vel = useCmdVelTopic(ros, topic);\n\n  let keysPressed = {\n    up: false,\n    down: false,\n    left: false,\n    right: false,\n  };\n  let move_cmd = 0;\n  let turn_cmd = 0;\n\n  const move = (lx, az) => {\n    const twist = new window.ROSLIB.Message({\n      linear: {\n        x: lx,\n        y: 0,\n        z: 0,\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: az,\n      },\n    });\n\n    if (connected) {\n      cmd_vel.publish(twist);\n    }\n  };\n\n  const keyDownHandler = (event) => {\n    if (gamepadActivated) return;\n\n    if (event.code === 'ArrowLeft' && event.shiftKey && event.altKey) {\n      keysPressed['left'] = true;\n    }\n    if (event.code === 'ArrowRight' && event.shiftKey && event.altKey) {\n      keysPressed['right'] = true;\n    }\n    if (event.code === 'ArrowUp' && event.shiftKey && event.altKey) {\n      keysPressed['up'] = true;\n    }\n    if (event.code === 'ArrowDown' && event.shiftKey && event.altKey) {\n      keysPressed['down'] = true;\n    }\n\n    move_cmd = keysPressed['up'] ? moveVel : keysPressed['down'] ? -moveVel : 0;\n\n    turn_cmd = keysPressed['left']\n      ? turnVel\n      : keysPressed['right']\n      ? -turnVel\n      : 0;\n\n    move(move_cmd, turn_cmd);\n  };\n\n  const keyUpHandler = (event) => {\n    if (gamepadActivated) return;\n\n    if (event.code === 'ArrowLeft') {\n      keysPressed['left'] = false;\n      turn_cmd = 0;\n    }\n    if (event.code === 'ArrowRight') {\n      keysPressed['right'] = false;\n      turn_cmd = 0;\n    }\n    if (event.code === 'ArrowUp') {\n      keysPressed['up'] = false;\n      move_cmd = 0;\n    }\n    if (event.code === 'ArrowDown') {\n      keysPressed['down'] = false;\n      move_cmd = 0;\n    }\n\n    move(move_cmd, turn_cmd);\n  };\n\n  window.onkeydown = keyDownHandler;\n  window.onkeyup = keyUpHandler;\n\n  const handleMove = (event) => {\n    if (gamepadActivated) return;\n\n    move((event.y / 50) * moveVel, (-event.x / 50) * turnVel);\n  };\n\n  const handleStop = () => {\n    move(0, 0);\n  };\n\n  const pollGamepad = () => {\n    const gamepads = navigator.getGamepads\n      ? navigator.getGamepads()\n      : navigator.webkitGetGamepads\n      ? navigator.webkitGetGamepads\n      : [];\n    if (!gamepads) {\n      return;\n    }\n\n    let axis0;\n    let axis1;\n    let buttonUp;\n    let buttonDown;\n    let buttonLeft;\n    let buttonRight;\n    let move_now;\n    let turn_now;\n\n    if (gamepads[0]) {\n      axis0 = -gamepads[0].axes[0].toFixed(2);\n      axis1 = -gamepads[0].axes[1].toFixed(2);\n      buttonUp = gamepads[0].buttons[12];\n      buttonDown = gamepads[0].buttons[13];\n      buttonLeft = gamepads[0].buttons[14];\n      buttonRight = gamepads[0].buttons[15];\n\n      if (\n        buttonUp.pressed ||\n        buttonDown.pressed ||\n        buttonLeft.pressed ||\n        buttonRight.pressed\n      ) {\n        move_now = buttonUp.pressed\n          ? moveVel\n          : buttonDown.pressed\n          ? -moveVel\n          : 0;\n\n        turn_now = buttonLeft.pressed\n          ? turnVel\n          : buttonRight.pressed\n          ? -turnVel\n          : 0;\n\n        move(move_now, turn_now);\n      } else {\n        move(axis1 * moveVel, axis0 * turnVel);\n      }\n    }\n  };\n\n  const connectHandler = (e) => {\n    setGamepadConnected(true);\n  };\n\n  const disconnectHandler = (e) => {\n    setGamepadConnected(false);\n    setGamepadActivated(false);\n    if (pollInterval) {\n      clearInterval(pollInterval);\n    }\n  };\n\n  const startGamepad = () => {\n    if (!gamepadConnected) return;\n    setGamepadActivated(true);\n    pollInterval = setInterval(pollGamepad, 10);\n    setPollIntervalId(pollInterval);\n  };\n\n  const stopGamepad = () => {\n    if (!gamepadConnected) return;\n    setGamepadActivated(false);\n    clearInterval(pollIntervalId);\n    move(0, 0);\n  };\n\n  window.addEventListener('gamepadconnected', (e) => connectHandler(e));\n  window.addEventListener('gamepaddisconnected', (e) => disconnectHandler(e));\n\n  return (\n    <TeleoperationContainer>\n      <TopicForm currentTopic={topic} setTopic={setTopic} />\n      <VelocitiesPanel\n        moveVel={moveVel}\n        setMoveVel={setMoveVel}\n        turnVel={turnVel}\n        setTurnVel={setTurnVel}\n      />\n      <ControlPanel>\n        <JoystickContainer>\n          <Joystick\n            size={100}\n            baseColor=\"var(--primary-color-light)\"\n            stickColor=\"var(--primary-color-dark)\"\n            move={handleMove}\n            stop={handleStop}\n          />\n        </JoystickContainer>\n        <Button\n          style={{ gridArea: 'top-left' }}\n          onMouseDown={() => move(moveVel, turnVel)}\n          onMouseUp={() => move(0, 0)}\n        >\n          <CgArrowTopLeftR />\n        </Button>\n        <Button\n          style={{ gridArea: 'up' }}\n          onMouseDown={() => move(moveVel, 0)}\n          onMouseUp={() => move(0, 0)}\n        >\n          <CgArrowUpR />\n        </Button>\n        <Button\n          style={{ gridArea: 'top-right' }}\n          onMouseDown={() => move(moveVel, -turnVel)}\n          onMouseUp={() => move(0, 0)}\n        >\n          <CgArrowTopRightR />\n        </Button>\n        <Button\n          style={{ gridArea: 'right' }}\n          onMouseDown={() => move(0, -turnVel)}\n          onMouseUp={() => move(0, 0)}\n        >\n          <CgArrowRightR />\n        </Button>\n        <Button\n          style={{ gridArea: 'bottom-right' }}\n          onMouseDown={() => move(-moveVel, turnVel)}\n          onMouseUp={() => move(0, 0)}\n        >\n          <CgArrowBottomRightR />\n        </Button>\n        <Button\n          style={{ gridArea: 'down' }}\n          onMouseDown={() => move(-moveVel, 0)}\n          onMouseUp={() => move(0, 0)}\n        >\n          <CgArrowDownR />\n        </Button>\n        <Button\n          style={{ gridArea: 'bottom-left' }}\n          onMouseDown={() => move(-moveVel, -turnVel)}\n          onMouseUp={() => move(0, 0)}\n        >\n          <CgArrowBottomLeftR />\n        </Button>\n        <Button\n          style={{ gridArea: 'left' }}\n          onMouseDown={() => move(0, turnVel)}\n          onMouseUp={() => move(0, 0)}\n        >\n          <CgArrowLeftR />\n        </Button>\n      </ControlPanel>\n      <Gamepad\n        onClick={gamepadActivated ? stopGamepad : startGamepad}\n        gamepadConnected={gamepadConnected}\n        gamepadActivated={gamepadActivated}\n      >\n        <GiConsoleController />\n      </Gamepad>\n      <TeleoperationText>\n        Use joystick, buttons, gamepad or press Shift + Alt + Arrow keys to\n        control your robot\n      </TeleoperationText>\n    </TeleoperationContainer>\n  );\n};\n\nexport default Teleoperation;\n","import { useCallback, useEffect, useState } from 'react';\nimport Config from './config';\n\nexport const useRosConnection = () => {\n  const [connected, setConnected] = useState(false);\n  const [ros] = useState(new window.ROSLIB.Ros());\n\n  const initConnection = useCallback(() => {\n    const establishConnection = async () => {\n      try {\n        console.log('Connecting...');\n        await ros.connect(\n          `ws://${Config.ROS2_WEB_BRIDGE_SERVER_IP}:${Config.ROS2_WEB_BRIDGE_SERVER_PORT}`\n        );\n      } catch (error) {\n        console.log('Connection problem:');\n        console.log(error);\n      }\n    };\n\n    ros.on('connection', () => {\n      console.log('Connection established');\n      setConnected(true);\n    });\n\n    ros.on('close', () => {\n      console.log('Connection closed');\n      setConnected(false);\n\n      setTimeout(() => {\n        establishConnection();\n      }, Config.RECONNECTION_TIMEOUT);\n    });\n\n    establishConnection();\n  }, [ros]);\n\n  useEffect(() => {\n    initConnection();\n    return () => {\n      console.log('Connection closed');\n    };\n  }, [initConnection]);\n\n  return [ros, connected];\n};\n\nexport const useCmdVelTopic = (ros, topic) => {\n  return new window.ROSLIB.Topic({\n    ros: ros,\n    name: topic !== '' ? topic : Config.CMD_VEL_TOPIC,\n    messageType: 'geometry_msgs/msg/Twist',\n  });\n};\n","import React, { useEffect, useState } from 'react';\nimport * as Three from 'three';\nimport styled from 'styled-components';\n\nimport Config from '../ros/config';\n\nconst RobotStateContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 100%;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\n\nconst GridContainer = styled.div`\n  display: grid;\n  grid-template-columns: 180px 50px;\n  grid-template-rows: auto;\n`;\n\nconst Caption = styled.div`\n  font-size: 1.2rem;\n  font-weight: 600;\n  letter-spacing: 0.4px;\n  grid-area: 'caption';\n  grid-column: 1/2;\n  margin-top: 8px;\n  margin-bottom: 2px;\n`;\n\nconst Property = styled.div`\n  grid-column: 1/1;\n  justify-self: start;\n`;\n\nconst Value = styled.div`\n  grid-column: 2/2;\n  justify-self: end;\n`;\n\nconst RobotState = ({ ros, connected }) => {\n  const [robotPose, setRobotPose] = useState({\n    x: 0,\n    y: 0,\n    orientation: 0,\n  });\n  const [robotVelocities, setRobotVelocities] = useState({\n    linearVelocity: 0,\n    angularVelocity: 0,\n  });\n\n  useEffect(() => {\n    let poseSubscriber = null;\n    let velocitySubscriber = null;\n\n    const getOrientationFromQuaternion = (rosOrientationQuaternion) => {\n      const q = new Three.Quaternion(\n        rosOrientationQuaternion.x,\n        rosOrientationQuaternion.y,\n        rosOrientationQuaternion.z,\n        rosOrientationQuaternion.w\n      );\n      const rpy = new Three.Euler().setFromQuaternion(q);\n\n      return rpy['_z'] * (180 / Math.PI);\n    };\n\n    if (connected) {\n      poseSubscriber = new window.ROSLIB.Topic({\n        ros: ros,\n        name: Config.POSE_TOPIC,\n        messageType: 'geometry_msgs/msg/PoseWithCovarianceStamped',\n      });\n      velocitySubscriber = new window.ROSLIB.Topic({\n        ros: ros,\n        name: Config.ODOM_TOPIC,\n        messageType: 'nav_msgs/msg/Odometry',\n      });\n\n      poseSubscriber.subscribe((message) =>\n        setRobotPose({\n          x: message.pose.pose.position.x,\n          y: message.pose.pose.position.y,\n          orientation: getOrientationFromQuaternion(\n            message.pose.pose.orientation\n          ),\n        })\n      );\n      velocitySubscriber.subscribe((message) =>\n        setRobotVelocities({\n          linearVelocity: message.twist.twist.linear.x,\n          angularVelocity: message.twist.twist.angular.z,\n        })\n      );\n\n      return () => {\n        poseSubscriber.unsubscribe();\n        velocitySubscriber.unsubscribe();\n      };\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [connected, ros]);\n\n  return (\n    <RobotStateContainer>\n      <GridContainer>\n        <Caption>Position</Caption>\n        <Property>x:</Property>\n        <Value>{robotPose.x.toFixed(2)}</Value>\n        <Property>y:</Property>\n        <Value>{robotPose.y.toFixed(2)}</Value>\n        <Property>orientation:</Property>\n        <Value>{robotPose.orientation.toFixed(2)}</Value>\n      </GridContainer>\n      <GridContainer>\n        <Caption>Velocites</Caption>\n        <Property>Linear Velocity:</Property>\n        <Value>{robotVelocities.linearVelocity.toFixed(2)}</Value>\n        <Property>Angular Velocity:</Property>\n        <Value>{robotVelocities.angularVelocity.toFixed(2)}</Value>\n      </GridContainer>\n    </RobotStateContainer>\n  );\n};\n\nexport default RobotState;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport { useRosConnection } from '../ros/rosService';\nimport Connection from './Connection';\nimport Teleoperation from './Teleoperation';\nimport RobotState from './RobotState';\nimport { GamepadContext } from '../contexts/GamepadContext';\n\nconst Heading = styled.h1`\n  align-self: center;\n  text-align: center;\n  width: 100%;\n  color: var(--primary-color-light);\n  font-size: 1.8rem;\n  font-weight: 700;\n  letter-spacing: 0.4px;\n  margin: 6px 0;\n`;\n\nconst ContentContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  max-width: 688px;\n  padding: 48px 24px;\n  margin: 0 auto;\n  background: var(--primary-color-dark-hover);\n  color: var(--primary-color-light);\n  height: calc(100% - 87px);\n`;\n\nexport default function Dashboard() {\n  const [ros, connected] = useRosConnection();\n  const [gamepadConnected, setGamepadConnected] = useState(false);\n  const [gamepadActivated, setGamepadActivated] = useState(false);\n\n  return (\n    <ContentContainer>\n      <GamepadContext.Provider\n        value={{\n          gamepadConnected,\n          setGamepadConnected,\n          gamepadActivated,\n          setGamepadActivated,\n        }}\n      >\n        <Heading pos=\"c\">ROS2 Teleoperation Dashboard</Heading>\n        <Connection connected={connected} />\n        <Teleoperation ros={ros} connected={connected} />\n        <RobotState ros={ros} connected={connected} />\n      </GamepadContext.Provider>\n    </ContentContainer>\n  );\n}\n","import Dashboard from './dashboard/Dashboard';\nimport './styles.css';\n\nfunction App() {\n  return (\n    <div>\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}